name: Build

on: [ push, pull_request ]

jobs:
  gradle-wrapper-validation:

    name: "Validate Gradle Wrapper"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

  check:

    name: "Build project"
    runs-on: ${{ matrix.platform }}
    needs: gradle-wrapper-validation

    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-latest ]

    steps:
    # Setup environment
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    # Setup Gradle cache
    - name: Setup cache for Gradle and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: "gradle-\
          ${{runner.os}}-\
          ${{hashFiles('gradle/wrapper/gradle-wrapper.properties')}}-\
          ${{hashFiles('**/*.gradle.kts')}}"
    # Get Plugin Verifier metadata
    - name: Get metadata about Plugin Verifier
      id: metadata
      run: |
        ./gradlew --stacktrace metadataFiles
        echo "::set-output name=ideVersions::$(cat build/metadata/pluginVerifierIdeVersions.txt)"
        echo "::set-output name=pluginVerifierHomeDir::$HOME/.pluginVerifier"
    # Cache Plugin Verifier IDEs
    - name: Setup Plugin Verifier IDEs Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.metadata.outputs.pluginVerifierHomeDir }}/ides
        key: plugin-verifier-${{ runner.os }}-${{ steps.metadata.outputs.ideVersions }}
    # Build and test
    - name: Build project
      run: ./gradlew --stacktrace assemble
    - name: Run linters and tests
      run: ./gradlew --stacktrace check
    - name: Run :verifyPlugin
      run: ./gradlew --stacktrace verifyPlugin
    - name: Run :runPluginVerifier
      run: ./gradlew --stacktrace runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.metadata.outputs.pluginVerifierHomeDir }}
    # Upload artifacts
    - name: Upload build reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: build-reports-${{ matrix.platform }}
        path: build/reports/
        if-no-files-found: ignore
    - name: Upload build result
      uses: actions/upload-artifact@v2
      with:
        name: build-result-${{ matrix.platform }}
        path: build/distributions/
        if-no-files-found: error

  release-draft:

    name: Create new draft for release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: check

    steps:
    # Remove old release drafts
    # Copied from https://github.com/JetBrains/intellij-platform-plugin-template
    - name: Remove old release drafts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
          | tr '\r\n' ' ' \
          | jq '.[] | select(.draft == true) | .id' \
          | xargs -I '{}' \
        curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}
    # Setup environment
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    # Setup cache
    - name: Setup cache for Gradle and dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: "gradle-\
          ${{runner.os}}-\
          ${{hashFiles('gradle/wrapper/gradle-wrapper.properties')}}-\
          ${{hashFiles('**/*.gradle.kts')}}"
    # Build
    - name: Build plugin
      run: ./gradlew --stacktrace buildPlugin metadataFiles
    # Get metadata
    - name: Get metadata
      id: metadata
      run: |
        echo "::set-output name=version::$(cat build/metadata/version.txt)"
        echo "::set-output name=zipfile::$(cat build/metadata/zipfile.txt)"
        echo "::set-output name=zipname::$(basename "$(cat build/metadata/zipfile.txt)")"
    # Create GitHub release draft
    - name: Create GitHub release draft
      uses: actions/create-release@v1
      id: create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.metadata.outputs.version }}
        release_name: v${{ steps.metadata.outputs.version }}
        body_path: ./build/metadata/latest_changelog.md
        draft: true
    - name: Upload asset for GitHub release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{ steps.metadata.outputs.zipfile }}
        asset_name: ${{ steps.metadata.outputs.zipname }}
        asset_content_type: application/zip
